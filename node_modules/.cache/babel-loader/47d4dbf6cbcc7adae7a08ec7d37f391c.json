{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactjs\\\\kapoy-chat-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Button } from \"@material-ui/core\";\nimport Main from \"./pages/Main\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, split, HttpLink, ApolloLink } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const {\n    loginWithRedirect,\n    getIdTokenClaims,\n    logout\n  } = useAuth0();\n  getIdTokenClaims().then(resp => {\n    console.log(resp);\n  });\n  const wsLink = new WebSocketLink({\n    uri: process.env.REACT_APP_GRAPHQL_WEBSOCKET,\n    options: {\n      reconnect: true,\n      connectionParams: {\n        headers: {\n          Authorization: token ? `Bearer ${token}` : \"\"\n        }\n      }\n    }\n  });\n  const httpLink = new HttpLink({\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    // get the authentication token from local cookie if it exists\n    return {\n      headers: { ...headers,\n        authorization: token ? `Bearer ${token}` : \"\"\n      }\n    };\n  });\n  const splitLink = split(({\n    query\n  }) => {\n    const definition = getMainDefinition(query);\n    return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n  }, wsLink, httpLink);\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: ApolloLink.from([authLink, splitLink])\n  });\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rXjG/duU+hc9i+FAyL0O918yTLg=\", false, function () {\n  return [useAuth0];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/reactjs/kapoy-chat-app/src/App.js"],"names":["useAuth0","Button","Main","WebSocketLink","getMainDefinition","setContext","ApolloClient","InMemoryCache","ApolloProvider","split","HttpLink","ApolloLink","App","loginWithRedirect","getIdTokenClaims","logout","then","resp","console","log","wsLink","uri","process","env","REACT_APP_GRAPHQL_WEBSOCKET","options","reconnect","connectionParams","headers","Authorization","token","httpLink","REACT_APP_GRAPHQL_ENDPOINT","authLink","_","authorization","splitLink","query","definition","kind","operation","client","cache","link","from"],"mappings":";;;;AACA,OAAO,WAAP;AACA,SAASA,QAAT,QAAyB,oBAAzB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,KAJF,EAKEC,QALF,EAMEC,UANF,QAOO,gBAPP;;;AASA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA,gBAArB;AAAuCC,IAAAA;AAAvC,MAAkDf,QAAQ,EAAhE;AACAc,EAAAA,gBAAgB,GAAGE,IAAnB,CAAyBC,IAAD,IAAU;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,GAFD;AAIA,QAAMG,MAAM,GAAG,IAAIjB,aAAJ,CAAkB;AAC/BkB,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,2BADc;AAE/BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,IADJ;AAEPC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAEC,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AADpC;AADO;AAFX;AAFsB,GAAlB,CAAf;AAWA,QAAMC,QAAQ,GAAG,IAAIrB,QAAJ,CAAa;AAC5BW,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYS;AADW,GAAb,CAAjB;AAGA,QAAMC,QAAQ,GAAG5B,UAAU,CAAC,CAAC6B,CAAD,EAAI;AAAEN,IAAAA;AAAF,GAAJ,KAAoB;AAC9C;AACA,WAAO;AACLA,MAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPO,QAAAA,aAAa,EAAEL,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,KAAP;AAMD,GAR0B,CAA3B;AAUA,QAAMM,SAAS,GAAG3B,KAAK,CACrB,CAAC;AAAE4B,IAAAA;AAAF,GAAD,KAAe;AACb,UAAMC,UAAU,GAAGlC,iBAAiB,CAACiC,KAAD,CAApC;AACA,WACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,GAPoB,EAQrBpB,MARqB,EASrBW,QATqB,CAAvB;AAYA,QAAMU,MAAM,GAAG,IAAInC,YAAJ,CAAiB;AAC9BoC,IAAAA,KAAK,EAAE,IAAInC,aAAJ,EADuB;AAE9BoC,IAAAA,IAAI,EAAEhC,UAAU,CAACiC,IAAX,CAAgB,CAACX,QAAD,EAAWG,SAAX,CAAhB;AAFwB,GAAjB,CAAf;AAKA,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEK;AAAxB;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GArDQ7B,G;UACiDZ,Q;;;KADjDY,G;AAuDT,eAAeA,GAAf","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Button } from \"@material-ui/core\";\nimport Main from \"./pages/Main\";\n\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  split,\n  HttpLink,\n  ApolloLink,\n} from \"@apollo/client\";\n\nfunction App() {\n  const { loginWithRedirect, getIdTokenClaims, logout } = useAuth0();\n  getIdTokenClaims().then((resp) => {\n    console.log(resp);\n  });\n\n  const wsLink = new WebSocketLink({\n    uri: process.env.REACT_APP_GRAPHQL_WEBSOCKET,\n    options: {\n      reconnect: true,\n      connectionParams: {\n        headers: {\n          Authorization: token ? `Bearer ${token}` : \"\",\n        },\n      },\n    },\n  });\n  const httpLink = new HttpLink({\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n  });\n  const authLink = setContext((_, { headers }) => {\n    // get the authentication token from local cookie if it exists\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    };\n  });\n\n  const splitLink = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === \"OperationDefinition\" &&\n        definition.operation === \"subscription\"\n      );\n    },\n    wsLink,\n    httpLink\n  );\n\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: ApolloLink.from([authLink, splitLink]),\n  });\n\n  return (\n    <ApolloProvider client={client}>\n\n    </ApolloProvider>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}