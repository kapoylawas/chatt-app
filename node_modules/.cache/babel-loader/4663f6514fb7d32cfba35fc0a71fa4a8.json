{"ast":null,"code":"var _jsxFileName = \"D:\\\\next_js\\\\ponk-chat-app-0.3.1\\\\src\\\\pages\\\\Main\\\\Message\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useSubscription } from \"@apollo/client\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport gql from \"graphql-tag\";\nimport { useRecoilState } from \"recoil\";\nimport MessageBubble from \"../../../components/MessageBubble\";\nimport { selectedUserState } from \"../../../recoil\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_MESSAGES = gql`\n  subscription MyQuery($where: messages_bool_exp = {}) {\n    messages(where: $where, order_by: { createdAt: asc }) {\n      id\n      fromUserId\n      message\n      fromUser {\n        name\n        picture\n      }\n      createdAt\n    }\n  }\n`;\n\nconst Message = () => {\n  _s();\n\n  const [selectedUser] = useRecoilState(selectedUserState);\n  const {\n    user\n  } = useAuth0();\n  let params = {\n    where: {}\n  };\n\n  if (selectedUser && !selectedUser.id) {\n    params.where = {\n      toUserId: {\n        _is_null: true\n      }\n    };\n  } else if (selectedUser && selectedUser.id) {\n    params.where = {\n      _or: [{\n        fromUserId: {\n          _eq: user.sub\n        },\n        toUserId: {\n          _eq: selectedUser.id\n        }\n      }, {\n        fromUserId: {\n          _eq: selectedUser.id\n        },\n        toUserId: {\n          _eq: user.sub\n        }\n      }]\n    };\n  }\n\n  const {\n    data\n  } = useSubscription(GET_MESSAGES, {\n    variables: params\n  });\n  setTimeout(() => {\n    const cb = document.getElementById(\"chat-content\").parentElement;\n\n    if (cb) {\n      cb.scrollTop = cb.scrollHeight;\n    }\n  }, 200);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat-content\",\n    children: data === null || data === void 0 ? void 0 : data.messages.map(m => {\n      return /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: m,\n        isMe: user.sub === m.fromUserId\n      }, m.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Message, \"eRpvnxnC2TSXYlATuiCl5EmGzcQ=\", false, function () {\n  return [useRecoilState, useAuth0, useSubscription];\n});\n\n_c = Message;\nexport default Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"sources":["D:/next_js/ponk-chat-app-0.3.1/src/pages/Main/Message/index.js"],"names":["useSubscription","useAuth0","gql","useRecoilState","MessageBubble","selectedUserState","GET_MESSAGES","Message","selectedUser","user","params","where","id","toUserId","_is_null","_or","fromUserId","_eq","sub","data","variables","setTimeout","cb","document","getElementById","parentElement","scrollTop","scrollHeight","messages","map","m"],"mappings":";;;AAAA,SAASA,eAAT,QAAgC,gBAAhC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;;AAEA,MAAMC,YAAY,GAAGJ,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;;AAeA,MAAMK,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,YAAD,IAAiBL,cAAc,CAACE,iBAAD,CAArC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAWR,QAAQ,EAAzB;AAEA,MAAIS,MAAM,GAAG;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAb;;AACA,MAAIH,YAAY,IAAI,CAACA,YAAY,CAACI,EAAlC,EAAsC;AACpCF,IAAAA,MAAM,CAACC,KAAP,GAAe;AACbE,MAAAA,QAAQ,EAAE;AACRC,QAAAA,QAAQ,EAAE;AADF;AADG,KAAf;AAKD,GAND,MAMO,IAAIN,YAAY,IAAIA,YAAY,CAACI,EAAjC,EAAqC;AAC1CF,IAAAA,MAAM,CAACC,KAAP,GAAe;AACbI,MAAAA,GAAG,EAAE,CACH;AACEC,QAAAA,UAAU,EAAE;AACVC,UAAAA,GAAG,EAAER,IAAI,CAACS;AADA,SADd;AAIEL,QAAAA,QAAQ,EAAE;AACRI,UAAAA,GAAG,EAAET,YAAY,CAACI;AADV;AAJZ,OADG,EASH;AACEI,QAAAA,UAAU,EAAE;AACVC,UAAAA,GAAG,EAAET,YAAY,CAACI;AADR,SADd;AAIEC,QAAAA,QAAQ,EAAE;AACRI,UAAAA,GAAG,EAAER,IAAI,CAACS;AADF;AAJZ,OATG;AADQ,KAAf;AAoBD;;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAWnB,eAAe,CAACM,YAAD,EAAe;AAAEc,IAAAA,SAAS,EAAEV;AAAb,GAAf,CAAhC;AAEAW,EAAAA,UAAU,CAAC,MAAM;AACf,UAAMC,EAAE,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,aAAnD;;AACA,QAAIH,EAAJ,EAAQ;AACNA,MAAAA,EAAE,CAACI,SAAH,GAAeJ,EAAE,CAACK,YAAlB;AACD;AACF,GALS,EAKP,GALO,CAAV;AAOA,sBACE;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA,cACGR,IADH,aACGA,IADH,uBACGA,IAAI,CAAES,QAAN,CAAeC,GAAf,CAAoBC,CAAD,IAAO;AACzB,0BACE,QAAC,aAAD;AAEE,QAAA,OAAO,EAAEA,CAFX;AAGE,QAAA,IAAI,EAAErB,IAAI,CAACS,GAAL,KAAaY,CAAC,CAACd;AAHvB,SACOc,CAAC,CAAClB,EADT;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KARA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAvDD;;GAAML,O;UACmBJ,c,EACNF,Q,EA+BAD,e;;;KAjCbO,O;AAwDN,eAAeA,OAAf","sourcesContent":["import { useSubscription } from \"@apollo/client\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport gql from \"graphql-tag\";\nimport { useRecoilState } from \"recoil\";\nimport MessageBubble from \"../../../components/MessageBubble\";\nimport { selectedUserState } from \"../../../recoil\";\n\nconst GET_MESSAGES = gql`\n  subscription MyQuery($where: messages_bool_exp = {}) {\n    messages(where: $where, order_by: { createdAt: asc }) {\n      id\n      fromUserId\n      message\n      fromUser {\n        name\n        picture\n      }\n      createdAt\n    }\n  }\n`;\n\nconst Message = () => {\n  const [selectedUser] = useRecoilState(selectedUserState);\n  const { user } = useAuth0();\n\n  let params = { where: {} };\n  if (selectedUser && !selectedUser.id) {\n    params.where = {\n      toUserId: {\n        _is_null: true,\n      },\n    };\n  } else if (selectedUser && selectedUser.id) {\n    params.where = {\n      _or: [\n        {\n          fromUserId: {\n            _eq: user.sub,\n          },\n          toUserId: {\n            _eq: selectedUser.id,\n          },\n        },\n        {\n          fromUserId: {\n            _eq: selectedUser.id,\n          },\n          toUserId: {\n            _eq: user.sub,\n          },\n        },\n      ],\n    };\n  }\n  const { data } = useSubscription(GET_MESSAGES, { variables: params });\n\n  setTimeout(() => {\n    const cb = document.getElementById(\"chat-content\").parentElement;\n    if (cb) {\n      cb.scrollTop = cb.scrollHeight;\n    }\n  }, 200);\n\n  return (\n    <div id=\"chat-content\">\n      {data?.messages.map((m) => {\n        return (\n          <MessageBubble\n            key={m.id}\n            message={m}\n            isMe={user.sub === m.fromUserId}\n          ></MessageBubble>\n        );\n      })}\n    </div>\n  );\n};\nexport default Message;\n"]},"metadata":{},"sourceType":"module"}